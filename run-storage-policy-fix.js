#!/usr/bin/env node
/**
 * ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS Policies ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import fs from 'fs'

dotenv.config({ path: './apps/web/.env.local' })

async function runStoragePolicyFix() {
  try {
    console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Storage Policies...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö environment variables')
      return
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL
    console.log('üìÑ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå fix-storage-policies-immediate.sql...')
    const sqlContent = fs.readFileSync('fix-storage-policies-immediate.sql', 'utf8')
    
    // ‡πÅ‡∏¢‡∏Å SQL statements (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    const statements = [
      // ‡∏•‡∏ö policies ‡πÄ‡∏Å‡πà‡∏≤
      `DROP POLICY IF EXISTS "Users can upload own selfies" ON storage.objects`,
      `DROP POLICY IF EXISTS "Users can view own selfies" ON storage.objects`, 
      `DROP POLICY IF EXISTS "Users can update own selfies" ON storage.objects`,
      `DROP POLICY IF EXISTS "Users can delete own selfies" ON storage.objects`,
      `DROP POLICY IF EXISTS "Admins can view all selfies" ON storage.objects`,
      `DROP POLICY IF EXISTS "Admins can manage all selfies" ON storage.objects`,
      
      // ‡πÄ‡∏õ‡∏¥‡∏î RLS
      `ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY`,
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡πÉ‡∏´‡∏°‡πà
      `CREATE POLICY "Users can upload own selfies" ON storage.objects
       FOR INSERT 
       WITH CHECK (
         bucket_id = 'employee-selfies' 
         AND auth.uid() IS NOT NULL
         AND (
           name LIKE 'checkin/' || auth.uid()::text || '/%'
           OR name LIKE 'checkout/' || auth.uid()::text || '/%'
         )
       )`,
       
      `CREATE POLICY "Users can view own selfies" ON storage.objects
       FOR SELECT 
       USING (
         bucket_id = 'employee-selfies' 
         AND auth.uid() IS NOT NULL
         AND (
           name LIKE 'checkin/' || auth.uid()::text || '/%'
           OR name LIKE 'checkout/' || auth.uid()::text || '/%'
         )
       )`,
       
      `CREATE POLICY "Users can update own selfies" ON storage.objects
       FOR UPDATE 
       USING (
         bucket_id = 'employee-selfies' 
         AND auth.uid() IS NOT NULL
         AND (
           name LIKE 'checkin/' || auth.uid()::text || '/%'
           OR name LIKE 'checkout/' || auth.uid()::text || '/%'
         )
       )`,
       
      `CREATE POLICY "Users can delete own selfies" ON storage.objects
       FOR DELETE 
       USING (
         bucket_id = 'employee-selfies' 
         AND auth.uid() IS NOT NULL
         AND (
           name LIKE 'checkin/' || auth.uid()::text || '/%'
           OR name LIKE 'checkout/' || auth.uid()::text || '/%'
         )
       )`,
       
      `CREATE POLICY "Admins can view all selfies" ON storage.objects
       FOR SELECT 
       USING (
         bucket_id = 'employee-selfies' 
         AND EXISTS (
           SELECT 1 FROM users u 
           WHERE u.id = auth.uid() AND u.role = 'admin'
         )
       )`,
       
      `CREATE POLICY "Admins can manage all selfies" ON storage.objects
       FOR ALL
       USING (
         bucket_id = 'employee-selfies' 
         AND EXISTS (
           SELECT 1 FROM users u 
           WHERE u.id = auth.uid() AND u.role = 'admin'
         )
       )`
    ]
    
    console.log(`üìù ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° execute ${statements.length} statements...`)
    
    let successCount = 0
    let errorCount = 0
    
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i].trim()
      if (!statement) continue
      
      try {
        console.log(`${i + 1}. ‡∏£‡∏±‡∏ô: ${statement.split('\n')[0]}...`)
        
        const { error } = await supabase.rpc('exec_sql', {
          sql: statement
        })
        
        if (error) {
          console.error(`   ‚ùå Error:`, error.message)
          errorCount++
        } else {
          console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
          successCount++
        }
        
      } catch (error) {
        console.error(`   üí• Exception:`, error.message)
        errorCount++
      }
      
      // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á statements
      await new Promise(resolve => setTimeout(resolve, 200))
    }
    
    console.log(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô:`)
    console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} statements`)
    console.log(`‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} statements`)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô...')
    const { data: policies, error: policyError } = await supabase
      .from('pg_policies')
      .select('policyname, cmd, qual, with_check')
      .eq('tablename', 'objects')
      .eq('schemaname', 'storage')
      .ilike('policyname', '%selfies%')
    
    if (policyError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á policies:', policyError)
    } else {
      console.log(`üìã ‡∏û‡∏ö ${policies.length} storage policies:`)
      policies.forEach(policy => {
        console.log(`- ${policy.policyname} (${policy.cmd})`)
      })
    }
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà:', error)
  }
}

async function createAdminUser() {
  try {
    console.log('\nüëë ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin Test User...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin@test.com ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: existingUser, error: checkError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('email', 'admin@test.com')
      .single()
    
    if (existingUser) {
      console.log('‚úÖ Admin user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß:', existingUser)
      return existingUser.id
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡πÉ‡∏´‡∏°‡πà
    console.log('üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡πÉ‡∏´‡∏°‡πà...')
    
    const adminId = '00000000-0000-0000-0000-000000000003'
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô users table ‡∏Å‡πà‡∏≠‡∏ô
    const { data: newUser, error: createUserError } = await supabase
      .from('users')
      .insert({
        id: adminId,
        email: 'admin@test.com',
        full_name: 'Test Admin User',
        role: 'admin',
        phone: '+66-000-000-003'
      })
      .select()
      .single()
    
    if (createUserError) {
      console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á user profile ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', createUserError)
      return null
    }
    
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', newUser)
    return newUser.id
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á admin user:', error)
    return null
  }
}

async function runAllFixes() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Storage Security ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!')
  
  await runStoragePolicyFix()
  await createAdminUser()
  
  console.log('\nüèÅ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Storage Policies ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
  console.log('üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö policies ‡πÉ‡∏´‡∏°‡πà')
}

runAllFixes()