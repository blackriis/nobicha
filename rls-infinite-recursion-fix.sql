-- üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS Policy Infinite Recursion (42P17)
-- ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: Policy "Admins can view all" ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î infinite recursion
-- ‡πÅ‡∏Å‡πâ‡πÇ‡∏î‡∏¢: ‡πÉ‡∏ä‡πâ auth.jwt() ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ query users table

-- ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô =====
SELECT 
  policyname,
  cmd,
  permissive,
  roles,
  qual
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'users'
ORDER BY policyname;

-- ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏•‡∏ö policy ‡∏ó‡∏µ‡πà‡∏°‡∏µ infinite recursion =====
-- Policy ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Ç‡∏≠‡∏á 42P17 error
DROP POLICY IF EXISTS "Admins can view all" ON users;

-- ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏•‡∏ö policies ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô =====
DROP POLICY IF EXISTS "Users can view own profile" ON users;
DROP POLICY IF EXISTS "Users can update own profile" ON users;

-- ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡πÉ‡∏´‡∏°‡πà (‡πÑ‡∏°‡πà‡∏°‡∏µ recursion) =====

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
CREATE POLICY "users_select_own" ON users 
FOR SELECT 
USING (auth.uid() = id);

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á  
CREATE POLICY "users_update_own" ON users 
FOR UPDATE 
USING (auth.uid() = id);

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏™‡∏£‡πâ‡∏≤‡∏á profile ‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏°‡∏∑‡πà‡∏≠ sign up)
CREATE POLICY "users_insert_own" ON users 
FOR INSERT 
WITH CHECK (auth.uid() = id);

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô (‡πÉ‡∏ä‡πâ JWT ‡πÅ‡∏ó‡∏ô users table)
CREATE POLICY "admin_select_all" ON users 
FOR SELECT 
USING (
  -- ‡πÉ‡∏ä‡πâ auth.jwt() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á infinite recursion
  (auth.jwt() ->> 'role')::text = 'admin'
  OR 
  auth.uid() = id  -- fallback: user ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
);

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
CREATE POLICY "admin_update_all" ON users 
FOR UPDATE 
USING (
  (auth.jwt() ->> 'role')::text = 'admin'
  OR 
  auth.uid() = id  -- fallback: user ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
);

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å operation
CREATE POLICY "admin_all_operations" ON users 
FOR ALL 
USING (
  (auth.jwt() ->> 'role')::text = 'admin'
);

-- ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡πÉ‡∏´‡∏°‡πà =====
SELECT 
  policyname,
  cmd,
  permissive,
  qual
FROM pg_policies 
WHERE schemaname = 'public' 
  AND tablename = 'users'
ORDER BY policyname;

-- ===== ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ recursion =====
-- Test case ‡∏à‡∏≥‡∏•‡∏≠‡∏á
DO $$ 
BEGIN
    RAISE NOTICE 'Testing JWT role access...';
    RAISE NOTICE 'Current auth.uid(): %', auth.uid();
    RAISE NOTICE 'JWT role field: %', (auth.jwt() ->> 'role');
    RAISE NOTICE 'Policies should work without infinite recursion now.';
END $$;

-- ===== ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç =====
-- 1. ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏ô SQL ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï user metadata ‡πÉ‡∏ô Supabase Auth
--    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ auth.jwt() ->> 'role' ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
-- 2. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin users ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ role = 'admin' ‡πÉ‡∏ô user_metadata
-- 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö login/logout ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ policies ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á