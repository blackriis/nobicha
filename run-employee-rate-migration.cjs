const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase configuration');
  console.error('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö NEXT_PUBLIC_SUPABASE_URL ‡πÅ‡∏•‡∏∞ SUPABASE_SERVICE_ROLE_KEY ‡πÉ‡∏ô .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function runEmployeeRateMigration() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô migration: ‡πÄ‡∏û‡∏¥‡πà‡∏° hourly_rate ‡πÅ‡∏•‡∏∞ daily_rate columns...');
  
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô migration file
    const migrationPath = path.join(__dirname, 'database/migrations/009_add_employee_rate_fields.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ Migration content:');
    console.log(migrationSQL);
    console.log('');
    
    // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL (split by semicolon and filter empty)
    const sqlCommands = migrationSQL
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
    
    console.log(`üîß ‡∏à‡∏∞‡∏£‡∏±‡∏ô ${sqlCommands.length} ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL...`);
    
    // ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    for (let i = 0; i < sqlCommands.length; i++) {
      const sql = sqlCommands[i];
      console.log(`\n[${i + 1}/${sqlCommands.length}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô:`, sql.substring(0, 100) + '...');
      
      const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql });
      
      if (error) {
        console.error(`‚ùå Error ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ${i + 1}:`, error);
        // ‡∏ñ‡πâ‡∏≤ error ‡πÄ‡∏õ‡πá‡∏ô column already exists ‡πÉ‡∏´‡πâ continue
        if (error.message.includes('already exists')) {
          console.log('‚ö†Ô∏è  Column ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°...');
          continue;
        }
        throw error;
      }
      
      console.log(`‚úÖ ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
    }
    
    console.log('\nüéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ columns ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
    const { data: tableInfo, error: infoError } = await supabase
      .from('users')
      .select('id, full_name, role, hourly_rate, daily_rate')
      .eq('role', 'employee')
      .limit(3);
    
    if (infoError) {
      console.error('‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table:', infoError);
      return;
    }
    
    console.log('\n‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö users table:');
    console.log('‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:', tableInfo?.length || 0, '‡∏Ñ‡∏ô');
    
    if (tableInfo && tableInfo.length > 0) {
      tableInfo.forEach(user => {
        console.log(`- ${user.full_name}: hourly_rate=${user.hourly_rate}, daily_rate=${user.daily_rate}`);
      });
      
      const hasRates = tableInfo.some(user => user.hourly_rate || user.daily_rate);
      if (hasRates) {
        console.log('\nüéâ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡πÅ‡∏•‡πâ‡∏ß');
        console.log('‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Payroll Calculation ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        console.log('\n‚ö†Ô∏è  Migration ‡∏£‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    console.error('Details:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô migration
runEmployeeRateMigration();