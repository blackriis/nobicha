#!/usr/bin/env node
/**
 * р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Storage Policies р╣Бр╕ер╕░ Permissions
 * р╕кр╕│р╕лр╕гр╕▒р╕Ъ bucket 'employee-selfies'
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: './apps/web/.env.local' })

async function checkStoragePolicies() {
  try {
    console.log('ЁЯФТ р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Storage Policies р╕кр╕│р╕лр╕гр╕▒р╕Ъ bucket "employee-selfies"')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    
    // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ RLS Policies р╕Ър╕Щ storage.objects
    console.log('1я╕ПтГг р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ RLS Policies р╕Ър╕Щ storage.objects...')
    
    const { data: policies, error: policiesError } = await supabase.rpc('get_storage_policies')
    
    if (policiesError) {
      console.log('тЪая╕П р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Бр╣Гр╕Кр╣Й RPC function:', policiesError.message)
      
      // р╕ер╕нр╕Зр╣Гр╕Кр╣Йр╕зр╕┤р╕Шр╕╡р╕нр╕╖р╣Ир╕Щр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ
      console.log('ЁЯФД р╣Гр╕Кр╣Йр╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Чр╕▓р╕Зр╕нр╕╖р╣Ир╕Щ...')
      
      // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З bucket р╣Вр╕Фр╕вр╕Хр╕гр╕З
      const { data: files, error: listError } = await supabase.storage
        .from('employee-selfies')
        .list('')
      
      if (listError) {
        console.error('тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Ц list files р╣Гр╕Щ bucket:', listError)
      } else {
        console.log('тЬЕ р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З bucket р╣Др╕Фр╣Й, files:', files.length, 'р╕гр╕▓р╕вр╕Бр╕▓р╕г')
      }
      
    } else {
      console.log('тЬЕ р╕Юр╕Ъ Storage Policies:', policies)
    }
    
    // р╕Чр╕Фр╕кр╕нр╕Ъ permissions р╣Бр╕Ър╕Ър╕Хр╣Ир╕▓р╕З р╣Ж
    console.log('\n2я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ъ User Permissions...')
    
    // Test 1: Login р╣Бр╕ер╕░р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З
    await testUserOwnPath()
    
    // Test 2: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щ
    await testUnauthorizedAccess()
    
  } catch (error) {
    console.error('ЁЯТе р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф:', error)
  }
}

async function testUserOwnPath() {
  try {
    console.log('\nЁЯУБ р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const supabase = createClient(supabaseUrl, supabaseAnonKey)
    
    // Login р╣Ар╕Ыр╣Зр╕Щ employee.som@test.com
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'employee.som@test.com',
      password: 'Employee123!'
    })
    
    if (authError) {
      console.error('тЭМ Login р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', authError)
      return
    }
    
    console.log('тЬЕ Login р╕кр╕│р╣Ар╕гр╣Зр╕И, User ID:', authData.user.id)
    
    // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕З
    const mockImageBuffer = Buffer.from(
      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==',
      'base64'
    )
    
    const ownPath = `checkin/${authData.user.id}/permission_test_${Date.now()}.png`
    console.log('ЁЯУд р╕Чр╕Фр╕кр╕нр╕Ър╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Хр╕▒р╕зр╣Ар╕нр╕З:', ownPath)
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('employee-selfies')
      .upload(ownPath, mockImageBuffer, {
        contentType: 'image/png'
      })
    
    if (uploadError) {
      console.error('тЭМ р╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', uploadError)
    } else {
      console.log('тЬЕ р╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И')
      
      // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Ф
      const { data: downloadData, error: downloadError } = await supabase.storage
        .from('employee-selfies')
        .download(ownPath)
      
      if (downloadError) {
        console.error('тЭМ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', downloadError)
      } else {
        console.log('тЬЕ р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕кр╕│р╣Ар╕гр╣Зр╕И')
      }
      
      // р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕Фр╕кр╕нр╕Ъ
      await supabase.storage.from('employee-selfies').remove([ownPath])
      console.log('ЁЯЧСя╕П р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕ер╣Йр╕з')
    }
    
    await supabase.auth.signOut()
    
  } catch (error) {
    console.error('ЁЯТе р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Юр╕▓р╕Шр╕Хр╕▒р╕зр╣Ар╕нр╕З:', error)
  }
}

async function testUnauthorizedAccess() {
  try {
    console.log('\nЁЯЪл р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щ (р╕Др╕зр╕гр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з)...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const supabase = createClient(supabaseUrl, supabaseAnonKey)
    
    // Login р╣Ар╕Ыр╣Зр╕Щ employee.som@test.com
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'employee.som@test.com',
      password: 'Employee123!'
    })
    
    if (authError) {
      console.error('тЭМ Login р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', authError)
      return
    }
    
    // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щ (р╣Гр╕Кр╣Й UUID р╕нр╕╖р╣Ир╕Щ)
    const otherUserId = '00000000-0000-0000-0000-000000000002' // UUID р╕нр╕╖р╣Ир╕Щ
    const unauthorizedPath = `checkin/${otherUserId}/unauthorized_test_${Date.now()}.png`
    
    console.log('ЁЯЪи р╕Чр╕Фр╕кр╕нр╕Ър╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щ:', unauthorizedPath)
    
    const mockImageBuffer = Buffer.from(
      'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==',
      'base64'
    )
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('employee-selfies')
      .upload(unauthorizedPath, mockImageBuffer, {
        contentType: 'image/png'
      })
    
    if (uploadError) {
      console.log('тЬЕ р╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щр╕Цр╕╣р╕Бр╕Ыр╕Пр╕┤р╣Ар╕кр╕Ш (р╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З):', uploadError.message)
    } else {
      console.log('тЭМ р╕Бр╕▓р╕гр╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щр╕Ьр╣Ир╕▓р╕Щ (р╣Др╕бр╣Ир╕Др╕зр╕гр╣Ар╕Ыр╣Зр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕Щр╕╡р╣Й!):', uploadData)
      
      // р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕╡р╣Ир╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Др╕Фр╣Й (р╣Др╕бр╣Ир╕Др╕зр╕гр╣Ар╕Бр╕┤р╕Фр╕Вр╕╢р╣Йр╕Щ)
      await supabase.storage.from('employee-selfies').remove([unauthorizedPath])
    }
    
    await supabase.auth.signOut()
    
  } catch (error) {
    console.error('ЁЯТе р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ unauthorized access:', error)
  }
}

async function testAdminAccess() {
  try {
    console.log('\nЁЯСС р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Бр╕Ър╕Ъ Admin...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const supabase = createClient(supabaseUrl, supabaseAnonKey)
    
    // Login р╣Ар╕Ыр╣Зр╕Щ admin
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'admin@test.com',
      password: 'Admin123!'
    })
    
    if (authError) {
      console.error('тЭМ Admin login р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', authError)
      return
    }
    
    console.log('тЬЕ Admin login р╕кр╕│р╣Ар╕гр╣Зр╕И, User ID:', authData.user.id)
    
    // р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Фр╕╣ files р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Гр╕Щ bucket
    const { data: allFiles, error: listError } = await supabase.storage
      .from('employee-selfies')
      .list('', {
        limit: 10
      })
    
    if (listError) {
      console.error('тЭМ Admin р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Ц list files:', listError)
    } else {
      console.log(`тЬЕ Admin р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Фр╕╣ files р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: ${allFiles.length} р╕гр╕▓р╕вр╕Бр╕▓р╕г`)
      if (allFiles.length > 0) {
        console.log('ЁЯУВ Files:', allFiles.map(f => f.name).slice(0, 3))
      }
    }
    
    await supabase.auth.signOut()
    
  } catch (error) {
    console.error('ЁЯТе р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ admin access:', error)
  }
}

async function runAllPolicyTests() {
  await checkStoragePolicies()
  await testAdminAccess()
  
  console.log('\nЁЯОп р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Policies:')
  console.log('тЬЕ р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕нр╕▒р╕Юр╣Вр╕лр╕ер╕Фр╣Гр╕Щр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Хр╕▒р╕зр╣Ар╕нр╕Зр╣Др╕Фр╣Й')
  console.log('тЬЕ р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Юр╕▓р╕Шр╕Вр╕нр╕Зр╕Др╕Щр╕нр╕╖р╣Ир╕Щ (р╕Цр╣Йр╕▓ policy р╕Чр╕│р╕Зр╕▓р╕Щр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З)')
  console.log('тЬЕ Admin р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Фр╕╣р╣Др╕Яр╕ер╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Др╕Фр╣Й')
  console.log('\nЁЯПБ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ Policies р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!')
}

runAllPolicyTests()