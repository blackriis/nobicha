#!/usr/bin/env node
/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: './apps/web/.env.local' })

async function verifyCurrentPolicies() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Policies ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô Supabase...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    
    console.log('üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:')
    console.log('1. ‡πÄ‡∏Ç‡πâ‡∏≤ Supabase Dashboard')
    console.log('2. ‡πÑ‡∏õ Authentication > Policies')
    console.log('3. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "All tables" ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "storage.objects"')
    console.log('4. ‡∏î‡∏π policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö bucket "employee-selfies"')
    
    console.log('\nüîß SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies (‡∏£‡∏±‡∏ô‡πÉ‡∏ô SQL Editor):')
    console.log(`
-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
SELECT 
  policyname,
  cmd,
  permissive,
  roles,
  qual,
  with_check
FROM pg_policies 
WHERE schemaname = 'storage' 
  AND tablename = 'objects'
  AND policyname ILIKE '%selfies%'
ORDER BY policyname;

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ RLS ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
SELECT relname, relrowsecurity 
FROM pg_class 
WHERE relname = 'objects' 
  AND relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'storage');
    `)
    
    console.log('\n‚ùó ‡∏´‡∏≤‡∏Å policies ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:')
    console.log('1. ‡∏•‡∏ö policies ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô:')
    console.log(`
DROP POLICY IF EXISTS "Users can upload own selfies" ON storage.objects;
DROP POLICY IF EXISTS "Users can view own selfies" ON storage.objects;
DROP POLICY IF EXISTS "Users can update own selfies" ON storage.objects;
DROP POLICY IF EXISTS "Users can delete own selfies" ON storage.objects;
DROP POLICY IF EXISTS "Admins can view all selfies" ON storage.objects;
DROP POLICY IF EXISTS "Admins can manage all selfies" ON storage.objects;
    `)
    
    console.log('\n2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß:')
    console.log(`
-- ‡πÄ‡∏õ‡∏¥‡∏î RLS ‡∏Å‡πà‡∏≠‡∏ô
ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö INSERT
CREATE POLICY "Employee upload selfies" ON storage.objects
FOR INSERT 
TO authenticated
WITH CHECK (
  bucket_id = 'employee-selfies' 
  AND (storage.foldername(name))[1] = 'checkin'
  AND (storage.foldername(name))[2] = auth.uid()::text
  OR
  bucket_id = 'employee-selfies' 
  AND (storage.foldername(name))[1] = 'checkout'
  AND (storage.foldername(name))[2] = auth.uid()::text
);

-- Policy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SELECT
CREATE POLICY "Employee view own selfies" ON storage.objects
FOR SELECT 
TO authenticated
USING (
  bucket_id = 'employee-selfies' 
  AND (
    ((storage.foldername(name))[1] = 'checkin' AND (storage.foldername(name))[2] = auth.uid()::text)
    OR
    ((storage.foldername(name))[1] = 'checkout' AND (storage.foldername(name))[2] = auth.uid()::text)
  )
);
    `)
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡πâ‡∏ß‡∏¢ Service Role
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Service Role (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á):')
    
    const { data: bucketFiles, error: bucketError } = await supabase.storage
      .from('employee-selfies')
      .list('', { limit: 5 })
    
    if (bucketError) {
      console.error('‚ùå Service Role ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ list files:', bucketError.message)
    } else {
      console.log(`‚úÖ Service Role ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ list files: ${bucketFiles.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bucket configuration
    const { data: bucketInfo, error: bucketInfoError } = await supabase.storage.getBucket('employee-selfies')
    
    if (bucketInfoError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bucket:', bucketInfoError.message)
    } else {
      console.log('üì¶ Bucket Info:')
      console.log('   - Public:', bucketInfo.public)
      console.log('   - File Size Limit:', bucketInfo.file_size_limit)
      console.log('   - Allowed MIME Types:', bucketInfo.allowed_mime_types)
    }
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  }
}

console.log('üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Policies ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç\n')
verifyCurrentPolicies()