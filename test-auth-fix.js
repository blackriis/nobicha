#!/usr/bin/env node

/**
 * Test Authentication Fix
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ authentication ‡∏î‡πâ‡∏ß‡∏¢ test users ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */

const { createClient } = require('@supabase/supabase-js')
const path = require('path')
const fs = require('fs')

// Load environment variables
const envPath = path.join(__dirname, 'apps/web/.env.local')
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
}

async function testAuthentication() {
  console.log('üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Authentication...\n')
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
  
  // Test users ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  const testUsers = [
    { email: 'admin@test.com', password: 'password123', role: 'admin' },
    { email: 'employee.som@test.com', password: 'password123', role: 'employee' },
    { email: 'manager.silom@test.com', password: 'password123', role: 'admin' }
  ]
  
  for (const testUser of testUsers) {
    console.log(`üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢: ${testUser.email}`)
    
    try {
      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
        email: testUser.email,
        password: testUser.password
      })
      
      if (authError) {
        console.log(`   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${authError.message}`)
      } else {
        console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! User ID: ${authData.user?.id}`)
        
        // Test profile API
        console.log(`   üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API...`)
        const response = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL.replace('supabase.co', 'supabase.co')}/rest/v1/user/profile`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${authData.session?.access_token}`,
            'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
          }
        })
        
        if (response.ok) {
          const profileData = await response.json()
          console.log(`   ‚úÖ Profile API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!`)
          console.log(`   üë§ Profile: ${JSON.stringify(profileData, null, 2)}`)
        } else {
          console.log(`   ‚ùå Profile API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status} ${response.statusText}`)
        }
        
        // Sign out
        await supabase.auth.signOut()
        console.log(`   üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`)
      }
    } catch (error) {
      console.log(`   üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`)
    }
    
    console.log('')
  }
}

// Main execution
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Authentication...\n')
  
  try {
    await testAuthentication()
    console.log('üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  }
}

main()
