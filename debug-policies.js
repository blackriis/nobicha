#!/usr/bin/env node
/**
 * Debug policies ‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: './apps/web/.env.local' })

async function debugPolicies() {
  try {
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    const supabase = createClient(supabaseUrl, supabaseServiceKey)
    
    console.log('üîç Debug Storage Policies...')
    
    console.log('\nüìä Supabase Connection Info:')
    console.log('- URL:', supabaseUrl?.substring(0, 30) + '...')
    console.log('- Service Key available:', !!supabaseServiceKey)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bucket
    console.log('\nüì¶ Bucket Status:')
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()
    
    if (bucketsError) {
      console.error('‚ùå Cannot list buckets:', bucketsError)
      return
    }
    
    const employeeBucket = buckets.find(b => b.name === 'employee-selfies')
    if (!employeeBucket) {
      console.error('‚ùå employee-selfies bucket not found!')
      return
    }
    
    console.log('‚úÖ Bucket found:', {
      name: employeeBucket.name,
      public: employeeBucket.public,
      owner: employeeBucket.owner
    })
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ Service Role ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('\nüß™ Service Role Test:')
    const testBuffer = Buffer.from('test')
    const servicePath = `test/service-${Date.now()}.txt`
    
    const { data: serviceUpload, error: serviceError } = await supabase.storage
      .from('employee-selfies')
      .upload(servicePath, testBuffer, {
        contentType: 'text/plain',
        upsert: true
      })
    
    if (serviceError) {
      if (serviceError.message.includes('mime type')) {
        console.log('‚úÖ Service role works (mime type restriction expected)')
      } else {
        console.error('‚ùå Service role upload failed:', serviceError.message)
      }
    } else {
      console.log('‚úÖ Service role upload works')
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await supabase.storage.from('employee-selfies').remove([servicePath])
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug policies
    console.log('\nüîß SQL Commands to Debug in Supabase Console:')
    console.log(`
-- 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RLS status
SELECT 
  schemaname, 
  tablename, 
  rowsecurity 
FROM pg_tables 
WHERE schemaname = 'storage' AND tablename = 'objects';

-- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö policies ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
SELECT 
  policyname,
  cmd,
  permissive,
  roles,
  qual,
  with_check
FROM pg_policies 
WHERE schemaname = 'storage' 
  AND tablename = 'objects'
ORDER BY policyname;

-- 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö auth context (‡∏£‡∏±‡∏ô‡∏Ç‡∏ì‡∏∞ login)
SELECT 
  auth.uid() as current_user_id,
  auth.role() as current_role;

-- 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö policy condition
SELECT 
  'checkin/585572b8-4552-4de9-8bb0-00aba3273fc0/test.png' ~ ('^checkin/' || '585572b8-4552-4de9-8bb0-00aba3273fc0' || '/.*') as should_be_true,
  'checkin/00000000-0000-0000-0000-000000000002/test.png' ~ ('^checkin/' || '585572b8-4552-4de9-8bb0-00aba3273fc0' || '/.*') as should_be_false;
    `)
    
    console.log('\n‚ö†Ô∏è ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:')
    console.log('1. Policies ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß')
    console.log('2. RLS ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏ô storage.objects')
    console.log('3. Policy syntax ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    console.log('4. Supabase caching issues')
    console.log('5. ‡πÉ‡∏ä‡πâ Service Role ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à (bypass policies)')
    
    console.log('\nüö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô:')
    console.log('‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏õ‡∏¥‡∏î bucket ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß')
    console.log('UPDATE storage.buckets SET public = false WHERE name = \'employee-selfies\';')
    console.log('')
    console.log('‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ Application-level validation ‡πÅ‡∏ó‡∏ô')
    console.log('- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user_id ‡πÉ‡∏ô API endpoints')
    console.log('- ‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ Storage RLS ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß')
    
  } catch (error) {
    console.error('üí• Debug error:', error)
  }
}

debugPolicies()