#!/usr/bin/env node

/**
 * Test Profile API
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API ‡∏ú‡πà‡∏≤‡∏ô Next.js server
 */

const { createClient } = require('@supabase/supabase-js')
const path = require('path')
const fs = require('fs')

// Load environment variables
const envPath = path.join(__dirname, 'apps/web/.env.local')
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
}

async function testProfileAPI() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API...\n')
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
  
  const testUser = { email: 'admin@test.com', password: 'password123' }
  
  try {
    // 1. Login
    console.log(`üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢: ${testUser.email}`)
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: testUser.email,
      password: testUser.password
    })
    
    if (authError) {
      console.log(`   ‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${authError.message}`)
      return false
    }
    
    console.log(`   ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! User ID: ${authData.user?.id}`)
    
    // 2. Test Profile API
    console.log(`\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API...`)
    const response = await fetch('http://localhost:3000/api/user/profile', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authData.session?.access_token}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (!response.ok) {
      console.log(`   ‚ùå Profile API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${response.status} ${response.statusText}`)
      const errorText = await response.text()
      console.log(`   Error: ${errorText}`)
      return false
    }
    
    const profileData = await response.json()
    console.log(`   ‚úÖ Profile API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!`)
    console.log(`   üìã Profile Data:`)
    console.log(`      Success: ${profileData.success}`)
    console.log(`      Profile: ${JSON.stringify(profileData.profile, null, 2)}`)
    
    // 3. Test with getUser function
    console.log(`\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö getUser function...`)
    const { data: userData, error: userError } = await supabase.auth.getUser()
    
    if (userError) {
      console.log(`   ‚ùå getUser ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${userError.message}`)
    } else {
      console.log(`   ‚úÖ getUser ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`)
      console.log(`      User: ${JSON.stringify(userData.user, null, 2)}`)
    }
    
    // 4. Sign out
    console.log(`\nüö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö...`)
    await supabase.auth.signOut()
    console.log(`   ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß`)
    
    return true
    
  } catch (error) {
    console.log(`   üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`)
    return false
  }
}

// Main execution
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API...\n')
  
  try {
    const success = await testProfileAPI()
    
    if (success) {
      console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
      console.log('‚úÖ Profile API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥')
      console.log('‚úÖ Authentication ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥')
      console.log('‚úÖ Supabase connection ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥')
    } else {
      console.log('\n‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Profile API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
      console.log('üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Next.js server ‡πÅ‡∏•‡∏∞ Supabase configuration')
    }
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  }
}

main()
