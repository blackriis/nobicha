#!/usr/bin/env node
/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Storage Policies ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Supabase Admin API
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: './apps/web/.env.local' })

async function fixPoliciesDirect() {
  try {
    console.log('‚ö° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Storage Policies ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })
    
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö policies ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î...')
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Service Role (‡∏Ñ‡∏ß‡∏£‡∏ú‡πà‡∏≤‡∏ô)
    const testBuffer = Buffer.from('test')
    const serviceRoleTestPath = 'test/service-role-test.txt'
    
    const { data: serviceUpload, error: serviceError } = await supabase.storage
      .from('employee-selfies')
      .upload(serviceRoleTestPath, testBuffer, {
        contentType: 'text/plain'
      })
    
    if (serviceError) {
      console.error('‚ùå Service role upload ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', serviceError)
    } else {
      console.log('‚úÖ Service role upload ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á)')
      
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await supabase.storage
        .from('employee-selfies')
        .remove([serviceRoleTestPath])
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bucket info
    console.log('üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bucket ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')
    const { data: bucketInfo, error: bucketError } = await supabase.storage.getBucket('employee-selfies')
    
    if (bucketError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bucket:', bucketError)
    } else {
      console.log('‚úÖ Bucket info:', bucketInfo)
    }
    
    // List ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ôbucket
    const { data: allFiles, error: listError } = await supabase.storage
      .from('employee-selfies')
      .list('', { limit: 10 })
    
    if (listError) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ list files:', listError)
    } else {
      console.log(`üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô bucket: ${allFiles.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
      allFiles.forEach(file => console.log(`  - ${file.name}`))
    }
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  }
}

async function testPoliciesWithUser() {
  try {
    console.log('\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö policies ‡∏î‡πâ‡∏ß‡∏¢ user authentication...')
    
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    const userClient = createClient(supabaseUrl, supabaseAnonKey)
    
    // Login
    const { data: authData, error: authError } = await userClient.auth.signInWithPassword({
      email: 'employee.som@test.com',
      password: 'Employee123!'
    })
    
    if (authError) {
      console.error('‚ùå User login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', authError)
      return
    }
    
    console.log('‚úÖ User login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, User ID:', authData.user.id)
    
    const testBuffer = Buffer.from('test-user-file')
    
    // Test 1: ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏Ñ‡∏ß‡∏£‡∏ú‡πà‡∏≤‡∏ô)
    const ownPath = `checkin/${authData.user.id}/policy_test_${Date.now()}.txt`
    console.log('üì§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á:', ownPath)
    
    const { data: ownUpload, error: ownError } = await userClient.storage
      .from('employee-selfies')
      .upload(ownPath, testBuffer, {
        contentType: 'text/plain'
      })
    
    if (ownError) {
      console.log('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', ownError.message)
    } else {
      console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await userClient.storage.from('employee-selfies').remove([ownPath])
    }
    
    // Test 2: ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô (‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
    const otherPath = `checkin/00000000-0000-0000-0000-000000000002/unauthorized_${Date.now()}.txt`
    console.log('üö´ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô:', otherPath)
    
    const { data: otherUpload, error: otherError } = await userClient.storage
      .from('employee-selfies')
      .upload(otherPath, testBuffer, {
        contentType: 'text/plain'
      })
    
    if (otherError) {
      console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á):', otherError.message)
    } else {
      console.log('‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡∏û‡∏≤‡∏ò‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!):', otherUpload)
      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
      await userClient.storage.from('employee-selfies').remove([otherPath])
    }
    
    await userClient.auth.signOut()
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö user policies:', error)
  }
}

async function runDirectFix() {
  console.log('üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Storage Policies ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á\n')
  
  await fixPoliciesDirect()
  await testPoliciesWithUser()
  
  console.log('\nüìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏ô Supabase Console:')
  console.log('1. ‡πÄ‡∏Ç‡πâ‡∏≤ Supabase Dashboard > Authentication > Policies')
  console.log('2. ‡πÑ‡∏õ Table: storage.objects')
  console.log('3. ‡∏•‡∏ö policies ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  console.log('4. ‡∏™‡∏£‡πâ‡∏≤‡∏á policies ‡πÉ‡∏´‡∏°‡πà:')
  console.log('   - Users can upload own selfies: FOR INSERT')
  console.log('   - Users can view own selfies: FOR SELECT') 
  console.log('   - Users can update own selfies: FOR UPDATE')
  console.log('   - Users can delete own selfies: FOR DELETE')
  console.log('   - Admins can manage all: FOR ALL')
  
  console.log('\nüéØ Policy Condition ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:')
  console.log('bucket_id = \'employee-selfies\' AND')
  console.log('auth.uid() IS NOT NULL AND')
  console.log('(name LIKE \'checkin/\' || auth.uid()::text || \'/%\' OR')
  console.log(' name LIKE \'checkout/\' || auth.uid()::text || \'/%\')')
}

runDirectFix()