#!/usr/bin/env node

/**
 * Fix RLS Policies Script
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS policies ‡∏ó‡∏µ‡πà‡∏°‡∏µ infinite recursion
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Load environment variables
const envPath = path.join(__dirname, 'apps/web/.env.local')
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=')
    if (key && value) {
      process.env[key.trim()] = value.trim()
    }
  })
}

async function fixRLSPolicies() {
  console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS Policies...\n')
  
  try {
    // Create Supabase client with service role
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )
    
    // Read the SQL file
    const sqlPath = path.join(__dirname, 'fix-rls-policies.sql')
    const sqlContent = fs.readFileSync(sqlPath, 'utf8')
    
    console.log('üìÑ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL...')
    console.log(`   ‡πÑ‡∏ü‡∏•‡πå: ${sqlPath}`)
    console.log(`   ‡∏Ç‡∏ô‡∏≤‡∏î: ${sqlContent.length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£`)
    
    // Execute the SQL
    console.log('\nüöÄ ‡∏£‡∏±‡∏ô SQL commands...')
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: sqlContent
    })
    
    if (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô SQL:')
      console.error(`   ${error.message}`)
      
      // Try alternative method - execute directly
      console.log('\nüîÑ ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô...')
      const { data: directData, error: directError } = await supabase
        .from('_sql')
        .select('*')
        .eq('query', sqlContent)
      
      if (directError) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô SQL ‡πÑ‡∏î‡πâ:')
        console.error(`   ${directError.message}`)
        console.log('\nüìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô SQL ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏ô Supabase Dashboard:')
        console.log('   1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://supabase.com/dashboard')
        console.log('   2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì')
        console.log('   3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà SQL Editor')
        console.log('   4. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å fix-rls-policies.sql')
        console.log('   5. ‡∏£‡∏±‡∏ô SQL commands')
        return false
      }
    }
    
    console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS Policies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
    
    // Test the connection
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, role')
      .limit(1)
    
    if (usersError) {
      console.error('‚ùå ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users:')
      console.error(`   ${usersError.message}`)
      return false
    }
    
    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!')
    console.log(`   ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users: ${users.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    
    return true
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:')
    console.error(`   ${error.message}`)
    return false
  }
}

// Main execution
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS Policies...\n')
  
  const success = await fixRLSPolicies()
  
  if (success) {
    console.log('\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS Policies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
    console.log('üìù ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô test-supabase-connection.js ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß')
  } else {
    console.log('\n‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
    console.log('üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Supabase project ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô SQL ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á')
  }
}

main().catch(error => {
  console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  process.exit(1)
})
