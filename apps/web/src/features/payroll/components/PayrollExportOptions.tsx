'use client'

import { useState } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Switch } from '@/components/ui/switch'
import { PayrollService } from '../services/payroll.service'

interface PayrollExportOptionsProps {
  cycleId: string
  cycleName: string
  onClose?: () => void
  onError?: (error: string) => void
}

export default function PayrollExportOptions({ 
  cycleId, 
  cycleName, 
  onClose,
  onError 
}: PayrollExportOptionsProps) {
  const [exporting, setExporting] = useState(false)
  const [selectedFormat, setSelectedFormat] = useState<'csv' | 'json'>('csv')
  const [includeDetails, setIncludeDetails] = useState(true)
  const [exportStatus, setExportStatus] = useState<{
    type: 'success' | 'error' | null
    message: string
  }>({ type: null, message: '' })

  const handleExport = async () => {
    setExporting(true)
    setExportStatus({ type: null, message: '' })
    
    try {
      const result = await PayrollService.exportPayrollReport(
        cycleId, 
        selectedFormat, 
        includeDetails
      )
      
      if (result.success) {
        if (selectedFormat === 'csv' && result.data instanceof Blob) {
          // Download CSV file
          const filename = `payroll-${cycleName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.csv`
          PayrollService.downloadCSVFile(result.data, filename)
          
          setExportStatus({
            type: 'success',
            message: `‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: ${filename}`
          })
        } else if (selectedFormat === 'json') {
          // Download JSON file
          const filename = `payroll-${cycleName.replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.json`
          const jsonString = JSON.stringify(result.data, null, 2)
          const blob = new Blob([jsonString], { type: 'application/json' })
          PayrollService.downloadCSVFile(blob, filename)
          
          setExportStatus({
            type: 'success',
            message: `‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: ${filename}`
          })
        }
      } else {
        const errorMessage = result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'
        setExportStatus({
          type: 'error',
          message: errorMessage
        })
        if (onError) {
          onError(errorMessage)
        }
      }
    } catch (err) {
      const errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î'
      setExportStatus({
        type: 'error',
        message: errorMessage
      })
      console.error('Export error:', err)
      if (onError) {
        onError(errorMessage)
      }
    } finally {
      setExporting(false)
    }
  }

  const exportOptions = [
    {
      format: 'csv' as const,
      title: 'Excel/CSV File',
      description: '‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ Excel ‡∏´‡∏£‡∏∑‡∏≠ Google Sheets',
      icon: 'üìä',
      pros: ['‡πÄ‡∏õ‡∏¥‡∏î‡∏á‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Excel', '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡πá‡∏Å', '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå'],
      cons: ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Plain Text']
    },
    {
      format: 'json' as const,
      title: 'JSON Data',
      description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô',
      icon: 'üîß',
      pros: ['‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠'],
      cons: ['‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π', '‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ']
    }
  ]

  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          </h3>
          <p className="text-sm text-gray-600">
            ‡∏£‡∏≠‡∏ö: {cycleName}
          </p>
        </div>
        {onClose && (
          <Button variant="outline" size="sm" onClick={onClose}>
            ‚úï ‡∏õ‡∏¥‡∏î
          </Button>
        )}
      </div>

      {/* Format Selection */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-900 mb-3">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå:</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {exportOptions.map((option) => (
            <div
              key={option.format}
              className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                selectedFormat === option.format
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => setSelectedFormat(option.format)}
            >
              <div className="flex items-start space-x-3">
                <div className="text-2xl">{option.icon}</div>
                <div className="flex-1">
                  <div className="flex items-center space-x-2">
                    <h5 className="font-medium text-gray-900">{option.title}</h5>
                    {selectedFormat === option.format && (
                      <Badge className="bg-blue-100 text-blue-800">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</Badge>
                    )}
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{option.description}</p>
                  
                  <div className="text-xs text-gray-500">
                    <div className="mb-1">
                      <span className="text-green-600">‚úì ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ:</span> {option.pros.join(', ')}
                    </div>
                    <div>
                      <span className="text-orange-600">‚ö† ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î:</span> {option.cons.join(', ')}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Export Options */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-900 mb-3">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å:</h4>
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <div>
              <span className="text-sm font-medium text-gray-900">
                ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
              </span>
              <p className="text-xs text-gray-500">
                ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß, ‡∏™‡∏≤‡∏Ç‡∏≤, ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
              </p>
            </div>
            <Switch
              checked={includeDetails}
              onCheckedChange={setIncludeDetails}
            />
          </div>
        </div>
      </div>

      {/* Export Status */}
      {exportStatus.type && (
        <div className={`mb-4 p-3 rounded-lg ${
          exportStatus.type === 'success' 
            ? 'bg-green-50 border border-green-200' 
            : 'bg-red-50 border border-red-200'
        }`}>
          <p className={`text-sm ${
            exportStatus.type === 'success' ? 'text-green-600' : 'text-red-600'
          }`}>
            {exportStatus.type === 'success' ? '‚úÖ' : '‚ùå'} {exportStatus.message}
          </p>
        </div>
      )}

      {/* Preview Info */}
      <div className="bg-gray-50 rounded-lg p-4 mb-6">
        <h5 className="font-medium text-gray-900 mb-2">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å:</h5>
        <div className="text-sm text-gray-600 space-y-1">
          <p>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏ä‡∏∑‡πà‡∏≠, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)</p>
          <p>‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô, ‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á, ‡πÇ‡∏ö‡∏ô‡∏±‡∏™, ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô, ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏ó‡∏ò‡∏¥)</p>
          <p>‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</p>
          {includeDetails && (
            <>
              <p>‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô</p>
              <p>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤</p>
              <p>‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</p>
            </>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex justify-between items-center">
        <div className="text-xs text-gray-500">
          <p>üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡πÉ‡∏ä‡πâ CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ, JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡πÑ‡∏õ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠</p>
        </div>
        
        <div className="space-x-2">
          {onClose && (
            <Button variant="outline" onClick={onClose}>
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Button>
          )}
          <Button 
            onClick={handleExport}
            disabled={exporting}
            className="min-w-[120px]"
          >
            {exporting ? (
              <span className="flex items-center space-x-2">
                <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full"></div>
                <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å...</span>
              </span>
            ) : (
              <span className="flex items-center space-x-2">
                <span>üì•</span>
                <span>‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å {selectedFormat.toUpperCase()}</span>
              </span>
            )}
          </Button>
        </div>
      </div>

      {/* Format Details */}
      <div className="mt-4 pt-4 border-t border-gray-200">
        <div className="text-xs text-gray-500">
          {selectedFormat === 'csv' ? (
            <div>
              <p className="font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ü‡∏•‡πå CSV:</p>
              <p>‚Ä¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏© (UTF-8 with BOM)</p>
              <p>‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢ Microsoft Excel ‡∏´‡∏£‡∏∑‡∏≠ Google Sheets</p>
              <p>‚Ä¢ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô</p>
            </div>
          ) : (
            <div>
              <p className="font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ü‡∏•‡πå JSON:</p>
              <p>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô</p>
              <p>‚Ä¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô</p>
              <p>‚Ä¢ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
            </div>
          )}
        </div>
      </div>
    </Card>
  )
}