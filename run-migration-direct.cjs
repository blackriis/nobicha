const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase configuration');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function runMigration() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° hourly_rate ‡πÅ‡∏•‡∏∞ daily_rate columns...');
  
  try {
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° columns
    console.log('\nüìù Step 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° hourly_rate ‡πÅ‡∏•‡∏∞ daily_rate columns...');
    
    const { data: alterData, error: alterError } = await supabase.rpc('exec', {
      sql: `
        ALTER TABLE users 
        ADD COLUMN IF NOT EXISTS hourly_rate DECIMAL(10,2) DEFAULT NULL,
        ADD COLUMN IF NOT EXISTS daily_rate DECIMAL(10,2) DEFAULT NULL;
      `
    });
    
    if (alterError && !alterError.message.includes('already exists')) {
      console.error('‚ùå Error ‡πÄ‡∏û‡∏¥‡πà‡∏° columns:', alterError);
      // ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ column
      console.log('‚ö†Ô∏è ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ column...');
      
      try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ú‡πà‡∏≤‡∏ô Supabase Admin
        const { error: updateError } = await supabase
          .from('users')
          .update({ 
            hourly_rate: 50.00,
            daily_rate: 600.00 
          })
          .eq('role', 'employee');
          
        if (updateError) {
          console.log('‚ùå Columns ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Supabase Dashboard ‡∏Å‡πà‡∏≠‡∏ô');
          console.log('\nüìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô Supabase Dashboard:');
          console.log('1. ‡πÄ‡∏Ç‡πâ‡∏≤ https://supabase.com/dashboard');
          console.log('2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');
          console.log('3. ‡πÑ‡∏õ Table Editor > users table');
          console.log('4. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns:');
          console.log('   - hourly_rate: DECIMAL(10,2), Default: NULL');
          console.log('   - daily_rate: DECIMAL(10,2), Default: NULL');
          console.log('5. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° columns');
          return;
        }
      } catch (directUpdateError) {
        console.log('‚ùå Columns ‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô Database Schema ‡∏Å‡πà‡∏≠‡∏ô');
        console.log('\nüîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πà‡∏ß‡∏ô:');
        console.log('‡πÉ‡∏ä‡πâ Supabase SQL Editor ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:');
        console.log(`
ALTER TABLE users 
ADD COLUMN hourly_rate DECIMAL(10,2) DEFAULT NULL,
ADD COLUMN daily_rate DECIMAL(10,2) DEFAULT NULL;

UPDATE users 
SET 
  hourly_rate = 50.00,
  daily_rate = 600.00
WHERE role = 'employee';
        `);
        return;
      }
    } else {
      console.log('‚úÖ Columns ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    }
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
    console.log('\nüìù Step 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...');
    
    const { data: updateData, error: updateError } = await supabase
      .from('users')
      .update({ 
        hourly_rate: 50.00,
        daily_rate: 600.00 
      })
      .eq('role', 'employee')
      .is('hourly_rate', null);
    
    if (updateError) {
      console.error('‚ùå Error ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', updateError);
    } else {
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    }
    
    // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    console.log('\nüìù Step 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå...');
    
    const { data: employees, error: checkError } = await supabase
      .from('users')
      .select('id, full_name, role, hourly_rate, daily_rate')
      .eq('role', 'employee')
      .limit(5);
    
    if (checkError) {
      console.error('‚ùå Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:', checkError);
      return;
    }
    
    console.log('\n‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
    console.log(`‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${employees?.length || 0} ‡∏Ñ‡∏ô`);
    
    if (employees && employees.length > 0) {
      employees.forEach(emp => {
        console.log(`- ${emp.full_name}: ‡∏ø${emp.hourly_rate}/‡∏ä‡∏°, ‡∏ø${emp.daily_rate}/‡∏ß‡∏±‡∏ô`);
      });
      
      const hasRates = employees.some(emp => emp.hourly_rate && emp.daily_rate);
      if (hasRates) {
        console.log('\nüéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Payroll Calculation ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß');
      } else {
        console.log('\n‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
  }
}

runMigration();